    /*
     * To change this license header, choose License Headers in Project Properties.
     * To change this template file, choose Tools | Templates
     * and open the template in the editor.
     */
    package crawl;
   // import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

    import java.sql.ResultSet;
import java.sql.SQLException;
    import java.util.*;
    import java.io.BufferedReader;
    import java.io.BufferedWriter;
    import java.io.FileWriter;
    import java.io.FileReader;
    import java.io.IOException;
    import java.io.File;
    import java.io.FileInputStream;
    import java.util.ArrayList;
    import java.util.Scanner;
    import org.jsoup.Connection;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.select.Elements;
    import org.jsoup.nodes.Element;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Arrays;
    import java.util.HashSet;
    import org.tartarus.snowball.ext.englishStemmer;
    /**
     *
     * @author BIKAA
     */
    public class Indexer  {
        public static DB db=new DB();
         private String URL;
            private englishStemmer stemmer=new englishStemmer();

        /*    private String LocateHtml()  {

              String content = "";
             try {
            BufferedReader in = new BufferedReader(new FileReader("Par.html"));
            String str;
            while ((str = in.readLine()) != null) {
                content +=str;
            }
            in.close();
            } catch (IOException e) {
            }
             return content;
            } */
             
            /* dah byindex w parse title extraction */
            // String URL=LocateHtml();
             
         /*   Document doc=Jsoup.parse(URL);
            String URLs=doc.toString();
           */ 

            private void indexPages()throws SQLException, IOException {
	      String sql = "SELECT * FROM crawler WHERE isIndexed = '0'";
		ResultSet rs = db.runSql(sql);
               
		while (rs.next()) {
			try {
	    this.URL = rs.getString("URL");
             Document doc1=Jsoup.connect(this.URL).ignoreContentType(true).get();
             String URLS=doc1.toString();
            Document doc=Jsoup.parse(URLS);
           String sqlUpdate = "UPDATE crawler SET isIndexed = '1' WHERE URL = '" + this.URL + "'";
		db.runSql2(sqlUpdate);
            Elements title = new Elements();
            title = doc.select("title");
            String titletag = title.toString();
            Elements plaintext=new Elements();
            plaintext=doc.select("p");
            String plaintag=plaintext.toString();
            Elements headers1=new Elements();
            headers1=doc.select("h1");
            String head1=headers1.toString();
            //System.out.println(titletag);
            Elements headers2=new Elements();
            headers2=doc.select("h2");
           // System.out.println(head1);
            String head2=headers2.toString();
            Elements headers3=new Elements();
            headers3=doc.select("h3");
            String head3=headers3.toString();
            //System.out.println(head2);
            Elements headers4=new Elements();
            headers4=doc.select("h4");
            String head4=headers4.toString();
            Elements headers5=new Elements();
            headers5=doc.select("h5");
            String head5=headers5.toString();
            Elements headers6=new Elements();
            headers6=doc.select("h6");
            String head6=headers6.toString();
              Elements keywords=new Elements();
            keywords=doc.select("meta");
            String keyo=keywords.toString();
            String[] names={"titles","content","h1","h2","h3","h4","h5","h6","keywords"};
           processtext(titletag,names[0],this.URL);
           processtext(plaintag,names[1],this.URL);
           processtext(head1,names[2],this.URL);
           processtext(head2,names[3],this.URL);
           processtext(head3,names[4],this.URL);
           processtext(head4,names[5],this.URL);
           processtext(head5,names[6],this.URL);
           processtext(head6,names[7],this.URL);
           processtext(keyo,names[8],this.URL);
          } 
                        catch (SQLException e) {
				rs.next();
                                System.out.println("ya mama");
			}}



           /* try(BufferedWriter file = new BufferedWriter(new FileWriter("D:\\HTMLs\\" +s+ ".txt"))) {

                                            file.write(s.toString());

                                    } catch (IOException e) {
                                            e.printStackTrace();
                                    }
            } */
          // System.out.println(titletag);


            //for(String str : teto) { System.out.println(str); }
            //stemmer.setCurrent(teto);
             //System.out.println(teto);
            //System.out.println(headora);
            //System.out.println(plaino);

            }
            private void processtext(String text,String name,String URL)
            {
           
                String[] s=text.replaceAll("[^a-zA-Z ]", "").toLowerCase().split("\\s+");
                
              //  String[] stopwords={"a", "about", "above", "above", "across", "after", "afterwards", "again", "against", "all", "almost", "alone", "along", "already", "also","although","always","am","among", "amongst", "amoungst", "amount", "an", "and", "another", "any","anyhow","anyone","anything","anyway", "anywhere", "are", "around", "as", "at", "back","be","became", "because","become","becomes", "becoming", "been", "before", "beforehand", "behind", "being", "below", "beside", "besides", "between", "beyond", "bill", "both", "bottom","but", "by", "call", "can", "cannot", "cant", "co", "con", "could", "couldnt", "cry", "de", "describe", "detail", "do", "done", "down", "due", "during", "each", "eg", "eight", "either", "eleven","else", "elsewhere", "empty", "enough", "etc", "even", "ever", "every", "everyone", "everything", "everywhere", "except", "few", "fifteen", "fify", "fill", "find", "fire", "first", "five", "for", "former", "formerly", "forty", "found", "four", "from", "front", "full", "further", "get", "give", "go", "had", "has", "hasnt", "have", "he", "hence", "her", "here", "hereafter", "hereby", "herein", "hereupon", "hers", "herself", "him", "himself", "his", "how", "however", "hundred", "ie", "if", "in", "inc", "indeed", "interest", "into", "is", "it", "its", "itself", "keep", "last", "latter", "latterly", "least", "less", "ltd", "made", "many", "may", "me", "meanwhile", "might", "mill", "mine", "more", "moreover", "most", "mostly", "move", "much", "must", "my", "myself", "name", "namely", "neither", "never", "nevertheless", "next", "nine", "no", "nobody", "none", "noone", "nor", "not", "nothing", "now", "nowhere", "of", "off", "often", "on", "once", "one", "only", "onto", "or", "other", "others", "otherwise", "our", "ours", "ourselves", "out", "over", "own","part", "per", "perhaps", "please", "put", "rather", "re", "same", "see", "seem", "seemed", "seeming", "seems", "serious", "several", "she", "should", "show", "side", "since", "sincere", "six", "sixty", "so", "some", "somehow", "someone", "something", "sometime", "sometimes", "somewhere", "still", "such", "system", "take", "ten", "than", "that", "the", "their", "them", "themselves", "then", "thence", "there", "thereafter", "thereby", "therefore", "therein", "thereupon", "these", "they", "thickv", "thin", "third", "this", "those", "though", "three", "through", "throughout", "thru", "thus", "to", "together", "too", "top", "toward", "towards", "twelve", "twenty", "two", "un", "under", "until", "up", "upon", "us", "very", "via", "was", "we", "well", "were", "what", "whatever", "when", "whence", "whenever", "where", "whereafter", "whereas", "whereby", "wherein", "whereupon", "wherever", "whether", "which", "while", "whither", "who", "whoever", "whole", "whom", "whose", "why", "will", "with", "within", "without", "would", "yet", "you", "your", "yours", "yourself", "yourselves", "the"};
                HashSet<String> h = new HashSet<String>();
               
                    for(int i=0;i<s.length;i++){
                      
                    
                         boolean check=false;
                   if(!s[i].equals("a")&& !s[i].equals("and") && !s[i].equals("about") &&
                           !s[i].equals("above") && !s[i].equals("after")&& !s[i].equals("again")&& 
                           !s[i].equals("all")&& !s[i].equals("an")&& !s[i].equals("are")
                           && !s[i].equals("as") && !s[i].equals("at")&& !s[i].equals("against")
                           && !s[i].equals("be")&& !s[i].equals("because")&& !s[i].equals("been")
                           && !s[i].equals("before")&& !s[i].equals("being")&& !s[i].equals("below")
                           && !s[i].equals("between")&& !s[i].equals("both")&& !s[i].equals("but")
                           && !s[i].equals("by")&& !s[i].equals("can")&& !s[i].equals("could")
                           && !s[i].equals("did")&& !s[i].equals("do")&& !s[i].equals("does")
                           && !s[i].equals("doing")&& !s[i].equals("during")&& !s[i].equals("down")
                           && !s[i].equals("each")&& !s[i].equals("few")&& !s[i].equals("for")
                           && !s[i].equals("from")&& !s[i].equals("further")&& !s[i].equals("had")
                           && !s[i].equals("has")&& !s[i].equals("have")&& !s[i].equals("having")
                           && !s[i].equals("he")&& !s[i].equals("he'd")&& !s[i].equals("he'll")
                           && !s[i].equals("her")&& !s[i].equals("here")&& !s[i].equals("hers")
                           && !s[i].equals("herself")&& !s[i].equals("him")&& !s[i].equals("his")
                           && !s[i].equals("how")&& !s[i].equals("i")&& !s[i].equals("i'd")
                           && !s[i].equals("i'm")&& !s[i].equals("if")&& !s[i].equals("in")
                           && !s[i].equals("it")&& !s[i].equals("its")&& !s[i].equals("itself")
                           && !s[i].equals("let")&& !s[i].equals("me")&& !s[i].equals("more")
                           && !s[i].equals("most")&& !s[i].equals("must")&& !s[i].equals("my")
                           && !s[i].equals("myself")&& !s[i].equals("no")&& !s[i].equals("nor")
                           && !s[i].equals("not")&& !s[i].equals("of")&& !s[i].equals("off")
                           && !s[i].equals("on")&& !s[i].equals("once")&& !s[i].equals("only")
                           && !s[i].equals("or")&& !s[i].equals("other")&& !s[i].equals("our")
                           && !s[i].equals("over")&& !s[i].equals("own")&& !s[i].equals("same")
                           && !s[i].equals("she")&& !s[i].equals("should")&& !s[i].equals("she'd")
                           && !s[i].equals("so")&& !s[i].equals("some")&& !s[i].equals("such")
                           && !s[i].equals("than")&& !s[i].equals("that")&& !s[i].equals("that's")
                           && !s[i].equals("the")&& !s[i].equals("their")&& !s[i].equals("theirs")
                           && !s[i].equals("them")&& !s[i].equals("themselves")&& !s[i].equals("then")
                           && !s[i].equals("there")&& !s[i].equals("there's")&& !s[i].equals("these")
                           && !s[i].equals("this")&& !s[i].equals("they'd")&& !s[i].equals("they're")
                           && !s[i].equals("those")&& !s[i].equals("through")&& !s[i].equals("to")
                           && !s[i].equals("too")&& !s[i].equals("under")&& !s[i].equals("until")
                           && !s[i].equals("up")&& !s[i].equals("very")&& !s[i].equals("was")
                           && !s[i].equals("wasn't")&& !s[i].equals("we")&& !s[i].equals("we'd")
                           && !s[i].equals("we'll")&& !s[i].equals("were")&& !s[i].equals("weren't")
                           && !s[i].equals("what")&& !s[i].equals("what's")&& !s[i].equals("when")
                           && !s[i].equals("where")&& !s[i].equals("when's")&& !s[i].equals("where's")
                           && !s[i].equals("who")&& !s[i].equals("whose")&& !s[i].equals("whom")
                           && !s[i].equals("why")&& !s[i].equals("with")&& !s[i].equals("won't")
                           && !s[i].equals("would")&& !s[i].equals("wouldn't")&& !s[i].equals("you")
                           && !s[i].equals("you'd")&& !s[i].equals("you'll")&& !s[i].equals("you're")
                           && !s[i].equals("is") && !s[i].equals("whether")  && !s[i].equals("your") 
                            && !s[i].equals("yourself")  && !s[i].equals("yours")   
                           
                           
                           )
                   {
                          if (s[i].length() > 1) {
                   stemmer.setCurrent(s[i]);
                   stemmer.stem();	
                   s[i] = stemmer.getCurrent(); 
                   
                         h.add(s[i]);
                   
                   }
                 
                      
                   
            

                   }
                   
                   ;
           
                    }
            String[] ss=h.toArray(new String[h.size()]);
          
            //  for(String str : ss) { System.out.println(str); }
            synchronized (db) {
			try {
                           
            if(name.equals("titles")){
              int x=0; 
            for(int i=0;i<ss.length;i++){
            
            
            String sqlUpdate ="INSERT INTO indexbahaa(word,priority,position,thisURL)"+" VALUES('"+ss[i]+"','high',"+x+",'"+URL+"')";
                        db.runSql2(sqlUpdate);
            x++;
           
            
            
            } }
            
             if(name.equals("h1") || name.equals("h2")|| name.equals("h3")|| name.equals("h4")|| name.equals("h5")|| name.equals("h6"))              
              {int x1=0;
                  for(int i=0;i<ss.length;i++){
            String sqlUpdate ="INSERT INTO indexbahaa(word,priority,position,thisURL)"+" VALUES('"+ss[i]+"','medium',"+x1+",'"+URL+"')";
            ResultSet rs=db.runSql(sqlUpdate);
            x1++;
            
            } }
              int x2=0;
               if(name.equals("content"))
               {
            for(int i=0;i<ss.length;i++){
            
            
            String sqlUpdate ="INSERT INTO indexbahaa(word,priority,position,thisURL)"+" VALUES('"+ss[i]+"','low',"+x2+",'"+URL+"')";
                        db.runSql2(sqlUpdate);
            x2++;
           
            
            }
            } int x3=0;
                if(name.equals("keywords"))
                {
            for(int i=0;i<ss.length;i++){
            
            
            String sqlUpdate ="INSERT INTO indexbahaa(word,priority,position,thisURL)"+" VALUES('"+ss[i]+"','keyword',"+x3+",'"+URL+"')";
                        db.runSql2(sqlUpdate);
            x3++;
           
            
            }
            } 
                        }
                        catch (SQLException e) {
				
			}
            }
            }
        /*    try( FileWriter file = new FileWriter(("D:\\HTMLs\\" +name+ ".txt"))) {
            for(int j=0;j<ss.length;j++){
                file.write(j+"-"+ss[j] + "\t\n");
            }	

                                    } catch (IOException e) {
                                            e.printStackTrace();
                                    }*/
         //   }



            private void Print() throws SQLException, IOException
            {
                indexPages();


                //System.out.println(URLs);
            }


            public static void main(String[] args) throws SQLException, IOException {
                Indexer i=new Indexer();
              
               i.Print();
              

            }

    }
