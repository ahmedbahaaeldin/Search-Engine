/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crawl;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

    import java.sql.ResultSet;
import java.sql.SQLException;
    import java.util.*;
    import java.io.BufferedReader;
    import java.io.BufferedWriter;
    import java.io.FileWriter;
    import java.io.FileReader;
    import java.io.IOException;
    import java.io.File;
    import java.io.FileInputStream;
    import java.util.ArrayList;
    import java.util.Scanner;
    import org.jsoup.Connection;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.select.Elements;
    import org.jsoup.nodes.Element;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Arrays;
    import java.util.HashSet;
import org.tartarus.snowball.ext.englishStemmer;

/**
 *
 * @author BIKAA
 *   public void Ranking(String [] words,String [] URLs)throws SQLException{
 */
public class Ranker {
     private DB db=new DB();
    private englishStemmer stemmer=new englishStemmer();
    public void Ranking(String [] words,queryprocessor qp)throws SQLException{
       // queryprocessor qp=new queryprocessor();
       // URLs=(qp.querying()).split("\\+s");
        int x=0;
     String[]  URLs=(qp.querying()).split("\\+s");
        int idfcount=URLs.length;
         for(int i=0;i<words.length;i++){
           stemmer.setCurrent(words[i]);
                   stemmer.stem();	
                   words[i] = stemmer.getCurrent(); 
   //System.out.println(w[i]);
   }
         int tf=0;
     String[] tosave1;
     String[] URLsave;
     int counttitle=0;int countheader=0;int countcontent=0;
    for(int i=0;i<words.length;i++){
        
    String sql="Select Distinct(thisURL),priority from indexbahaa where word='"+words[i]+"'";   
    ResultSet rs=db.runSql(sql);
    while(rs.next())
    {
        
         URLsave=(rs.getString("thisURL")).split("\\+s");
        
        tosave1=(rs.getString("priority")).split("\\+s");
        System.out.println(tosave1[i]);
        if(tosave1[i].equals("high")){
        counttitle++;
        
        }
        else if(tosave1[i].equals("medium")){
        countheader++;
        
        }
         else if(tosave1[i].equals("low")){
        countcontent++;
        
        }
        /*	The TF of each word is calculated as follows:
6*title + 5*h+ content*/
        synchronized (db){
       
       // System.out.println(URLs[i]);
 String sqlrank="Select inLinks from dbo.crawler where URL='"+URLs[i]+"'";
     ResultSet rs1=db.runSql(sqlrank);
     while(rs1.next())
     {
         x=rs1.getInt("inLinks");
     }
   
    }
    
    }
    }
    float idf=URLs.length/1844;
      tf=counttitle*6+5*countheader+countcontent;
       
        float rank=0;
        rank=idf*tf;
       
        for(int i=0;i<URLs.length;i++){
        String sqlinsert="Insert into Rankings Distinct(URL,inLinks,rank) values('"+URLs[i]+"',"+x+","+rank+")";
       db.runSql2(sqlinsert);
      
                
        
        
        
        }
        
        
    }
       public static void main(String[] args)throws SQLException{
           Ranker rank=new Ranker();
           queryprocessor x=new queryprocessor();
             Scanner reader = new Scanner(System.in);
   System.out.println("Search box :");
   String[] w=(reader.nextLine()).split("\\s+");
           rank.Ranking(w,x);
       }
}
